// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String
  github       String?
  resume       String?
  linkedin     String?
  roles        String[]
  commitment   String[]
  opportunity  String?
  introduction String?
  twitter      String?
  minIncome    Int?
  referralID   String?
  UserId      Int? @unique
  user         User?    @relation(fields: [UserId], references: [id])
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  profilePic     String?
  password       String?
  onboarded      Boolean       @default(false)
  type           Int
  provider       String
  candidate      Candidate?   
  organization    Organization?
}

model Opportunity {
  id                        Int       @id @default(autoincrement())
  title                     String
  companyName               String
  companyTagline            String
  companyDesc               String
  companyLogo               String?
  role                      String
  roleApplyingFor           String
  payRange                  String
  quantity                  Int?
  minAnnualPay              Int?
  maxAnnualPay              Int?
  currency                  String?
  minMonthlyPay             Int
  maxMonthlyPay             Int
  equity                    Int?
  vestingProcedure          String?
  potentialRevenueCompany   Float?
  potentialRevenueCandidate Float?
  waiveFeesCompany          Boolean?
  waiveFeesCandidate        Boolean?
  totalPotentialRevenue     Float?
  jobID                     String?
  commitment                String
  location                  String
  yearsExp                  String?
  deadline                  DateTime?
  isActive                  Boolean?
  cutsomJobPortalLink       String?
  createdAt                 DateTime
  updatedAt                 DateTime  @updatedAt
}

model Gigs {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String
  amount      Int
  twitterLink String
  gigType     String
  role        String[]
  deadline    DateTime
  winner      String?
}

model Organization {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  username    String       @unique
  name        String       @unique
  location    String
  website     String?
  overview    String
  foundedAt   String
  profilePic  String?
  jobProfiles JobProfile[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
   user        User?        @relation(fields: [userId], references: [id])
  userId      Int? @unique
}

model JobSeeker {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  password          String
  type              Int
  username          String        @unique
  firstName         String
  lastName          String
  description       String
  phoneNumber       String
  yearsOfExperience Int
  skills            String[]
  resume            String?
  profilePic        String?
  jobApplications   Application[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  followedBy        Connections[] @relation("followedBy")
  following         Connections[] @relation("following")
  experiences       Experience[]
  projects          Project[]
}

model JobProfile {
  id                 Int           @id @default(autoincrement())
  role               String
  requiredExperience Int
  employeeType       String
  salary             Int
  jobDescription     String
  location           String
  skillsRequired     String[]
  organization       Organization  @relation(fields: [organizationId], references: [id])
  organizationId     Int
  applications       Application[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id              Int        @id @default(autoincrement())
  jobProfile      JobProfile @relation(fields: [jobProfileId], references: [id])
  jobProfileId    Int
  jobSeeker       JobSeeker  @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId     Int
  status          Status     @default(PENDING)
  applicationDate DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([jobProfileId, jobSeekerId])
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
}

model Connections {
  followedBy   JobSeeker        @relation("followedBy", fields: [followedById], references: [id])
  followedById Int
  following    JobSeeker        @relation("following", fields: [followingId], references: [id])
  followingId  Int
  status       ConnectionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@id([followingId, followedById])
}

model Experience {
  id          Int       @id @default(autoincrement())
  role        String
  company     String
  techStack   Json[]
  startMonth  String
  startYear   Int
  endMonth    String?
  endYear     Int?
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId Int
}

model Project {
  id           Int       @id @default(autoincrement())
  name         String
  image        String?
  description  String
  deployedLink String?
  repoLink     String?
  techStack    String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  jobSeeker    JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId  Int
}
